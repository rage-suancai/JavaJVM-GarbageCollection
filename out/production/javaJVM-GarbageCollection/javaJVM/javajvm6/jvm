元空间
JDK8之前 Hotspot虚拟机的方法区实际上是永久代实现的 在JDK8之后 Hotspot虚拟机不再使用永久代 而是采用了全新的元空间 类的元信息被存储在元空间中
元空间没有使用堆内存 而是与不相连的本地内存区域 所以 理论上系统的可用使用的内存有多大 元空间就有多大 所以不会出现永久代存在时的内存溢出问题
这项改造也是有必要的 永久代的调优是很困难的 虽然可用设置永久代的大小 但是很难确定一个合适的大小 因为其中的影响因素很多 比如类的数量的多少 常量数量的多少等

                            堆内存                                     堆内存                                    堆内存
                  -------------------------                -------------------------                -------------------------
                  |                       |                |                       |                |                       |
                  |                       |                |                       |                |                       |
                  |                       |                |           字符串常量池  |                |           字符串常量池  |
                  |                       | -------------> |                       | -------------> |                       |
                  |-----------------------|                |-----------------------|                |-----------------------|
                  |   永久代(方法区的实现)    |               |   永久代(方法区的实现)    |               |   永久代(方法区的实现)    |
                  |           |           |                |           |           |                |         |元数据区[类信息 |
                  |类信息等数据 | 运行时常量池|                |类信息等数据 | 其他常量池  |                |  直接内存 |等数据][其他]  |
                  |-----------------------|                |-----------------------|                |-----------------------|
                           JDK6之前                                   JDK7                                    JDK8之后


因此在JDK8时直接将本地内存作为元空间(Metaspace)的区域 物理内存有多大 元空间内存就可以有多大 这样永久代的空间分配问题就解决了 所以最终它变成了这样:

                                        Native Method Stacks                Program Counter Register
                                             (本地方法栈)                           (程序计数器)

                                       |-------------------------------------| |-------------------------------------| |---------|
                            JVM Stacks |            栈帧-1(方法A)              | |            栈帧-2(方法B)             | |  栈帧-3  |
                             (虚拟机栈) |[局部变量表][操作栈][动态连接][方法返回地址]| |[局部变量表][操作栈][动态连接][方法返回地址]| |   ...   |
                                       |-------------------------------------| |-------------------------------------| |----------|

                                      |---------------------------------------|  |----------------------------------| |------------|
                                      |               Heap(堆区)               |  |         Metaspace(元数据区)       | |            |
                                      ||-----------------------||------------||  |    [常量池]                       | | CodeCache  |
                                      ||     [Edan][S0][S1]    ||     Old    ||  |                       [klass     | | JIT编译产物 |
                                      ||     Young区(新生代)    ||    (老年代)  ||  |   [方法元信息]         类元信息]    | |            |
                                      ||-----------------------||------------||  |                                  | |            |
                                      |---------------------------------------|  |----------------------------------| |------------|

到此 我们对于JVM内存区域的讲解就基本完成了