标记-清除算法
前面我们已经了解整个堆内存实际上是以分代收集机制为主 但是依然没有讲到具体的收集过程 那么 具体的回收过程又是什么样的呢? 首先我们来了解一下最古老的 标记-清除算法

首先标记所有需要回收的对象 然后再依次回收掉被标记的对象 或是标记出所有不需要回收的对象 只回收未标记的对象
实际上这种算法是非常基础的 并且最易于理解的(这里对象我就以一个方框替代了 当然实际上存放的是我们前说到的GC Roots形式)

                                      内存区域                                                         内存区域
                          -------------------------------                               -------------------------------
                                 对象1  对象5  对象9                                                  对象5
                                 对象2  对象6  对象10       -----------开始清除----------->     对象2            对象10
                                 对象3  对象7  对象11                                                 对象7    对象11
                                 对象4  对象8  对象12                                          对象4
                          -------------------------------                               -------------------------------

虽然此方法非常简单 但是缺点也是非常明显的 首先如果内存中存在大量的对象 那么可能就会存在大量的标记 并且大规模进行清除
并且一次标记清除之后 连续的内存空间可能会出现许许多多的空隙 碎片化会导致连续内存空间利用率降低

标记-复制算法
既然标记清除算法在面对大量对象时效率低 那么我们可以采用标记-复制算法 它将容量分为同样大小的两块区域

标记复制算法 实际上就是将两块内存区域划分为大小相同的两块区域 每次只使用其中的一块区域 每次垃圾回收结束后 将所有存活的对象全部复制到另一块区域中
并一次性清空当前区域 虽然浪费了一些时间进行复制操作 但是这样能够很好地解决对象大面积回收后空间碎片化严重的问题

                                         内存区域                                                              内存区域
                          ------------------------------------                                ------------------------------------
                           对象1 对象5 对象9  |                                                  对象1       对象9  |      对象5
                           对象2 对象6 对象10 |   这一半暂时不用    -----------开始清除----------->        对象6       | 对象2      对象10 ------->
                           对象3 对象7 对象11 |                                                  对象3             |      对象7 对象11        |
                           对象4 对象8 对象12 |                                                        对象8 对象12 | 对象4                   |
                          ------------------------------------                                ------------------------------------        |
                                                                                                                                          |
                                                                           内存区域                                                         |
                                                            ------------------------------------                                          |
                                                                              |对象10 对象5 对象2                                           |
                                                                  全部清除      |对象7 对象11 对象4 <-----------------------------------------|
                                                                              |
                                                                              |
                                                            ------------------------------------

这种算法就非常适用于新生代(因为新生代的回收效率极高 一般不会留下太多的对象)的垃圾回收 而我们之前所说的新生代Survivor区其实就是这个思路 包括8:1:1的比例也正是为了对标记复制算法进行优化而采取的

标记-整理算法
虽然标记-复制算法能够很好地应对新生代高回收率的场景 但是放到老年代  它就显得很鸡肋了 我们知道 一般长期都回收不到的对象 才有机会进入到老年代
所以老年代一般都是些钉子户 可能一次GC后 仍然存留下很多对象 而标记复制算法会在GC后完整复制整个区域内容 并且会折损50%的区域 显然这并不适用于老年代

那么我们能否这样 在标记所有待回收对象之后 不急着去进行回收操作 而是将所有待回收的对象整齐排列在一段内存空间中
而需要回收的对象全部往后丢 这样 前半部分的所有对象都是无需进行回收的 而后半部分直接一次性清除即可

                         -----------------------               -----------------------                    -----------------------
                          对象1 对象5 对象9 对象12                对象10 对象5 对象11 对象4                     对象10 对象5 对象11 对象4
                          对象2 对象6 对象10 对象4  ---开始整理---> 对象2 对象7 对象1 对象9   ---清除后面一部分---> 对象2 对象7
                          对象3 对象7 对象11 对象8                 对象3 对象8 对象12 对象6

虽然这样能够保证内存空间充分使用 并且也没有标记复制算法那么复制 但是缺点也是显而易见的 它的效率比前两者都低 甚至
由于需要修改对象在内存中的位置 此时程序必须要暂停才可以 在极端情况下 可能会导致整程序发生停顿(被称为"Stop The World")

所以 我们可以将标记清除算法和标记整理算法混合使用 在内存空间还不是很凌乱的时候 采用标记清除算法其实是没有多大问题的 当内存空间凌乱到一定程度后 我们可以进行一次标记整理算法